Got it — here’s a clean, actionable read on what’s going on and how to fix it fast.

# What’s actually broken

## 1) Referral page shows 0, but you have 35,000 XNRT in “Referral balance”

**Why:**
Your payout logic credits **fallback** commissions (missing levels) straight to the admin’s `referralBalance`, but it **doesn’t write a commission row** (you even noted a `continue` around line ~680).
Your **Referrals page** totals from the **`Referral`/`commissions` table**, which (for fallback) is empty ⇒ it renders 0.
Your **Withdrawals page** reads from the **balance field** (which *does* include fallback) ⇒ 35,000 XNRT.

**Net effect:** data source mismatch:

* Page A (stats) = table totals (no fallback rows) → 0
* Page B (withdraw) = balance (has fallback) → 35,000

That’s why Recent Activity shows items (likely logged from a different stream), while the summary is zero.

## 2) QR code doesn’t render

The generator/lifecycle is fine, but the canvas/ref timing isn’t. Typical culprits:

* Drawing before the modal/canvas is mounted (React/dialog not yet in the DOM).
* SSR calling `qrcode` on the server (no DOM).
* The canvas selector points to a node that isn’t present (or replaced) when the dialog opens.

# Fix paths (pick A or B for referrals)

## A) **Surface the real, withdrawable commission balance** on the Referrals page (fastest)

* Use the same **source of truth** as Withdrawals (`referralBalance`) for the page header KPIs.
* Add a breakdown row: **Direct / L2 / L3 / Company Fallback**, where Direct/L2/L3 come from the `Referral` (commission log) table, and **Fallback** = `referralBalance - (direct+indirect totals)`.
* Add a tooltip: “Company fallback commissions are generated when a referrer level is missing.”

**Pros:** 1–2 screens changed, instantly consistent.
**Cons:** Historical per-deposit drill-down for fallback still absent (but you can still display aggregate fallback).

**Example API shape**

```json
{
  "withdrawableBalance": 35000,
  "breakdown": {
    "level1": 0,
    "level2": 0,
    "level3": 0,
    "companyFallback": 35000
  },
  "recent": [ /* existing activity feed */ ]
}
```

## B) **Write commission rows for fallback** (proper ledgering)

* When distributing commissions, **insert a commission record even for fallback**, with:

  * `recipient_user_id = admin_id`
  * `source_user_id = depositor`
  * `level = null` (or `0`)
  * `is_company_fallback = true`
  * `amount_xnrt`, `source_type = 'deposit'`, `source_id = deposit_id`
* **Do not** `continue` without inserting; credit balance **and** log it.
* Update the Referrals page aggregations to include `is_company_fallback=true` rows **in the “Company Fallback” bucket** (but keep them **out** of “My Direct/L2/L3 referrals” counts).

**Pros:** Perfect auditability; stats match balances.
**Cons:** Requires a small data migration.

**Backfill script (conceptual SQL)**

```sql
-- Create the flag if not present
ALTER TABLE referral_commissions ADD COLUMN IF NOT EXISTS is_company_fallback BOOLEAN DEFAULT FALSE;

-- Insert missing logs for existing fallback credits
INSERT INTO referral_commissions (
  recipient_user_id, source_user_id, level, amount_xnrt,
  source_type, source_id, is_company_fallback, created_at
)
SELECT
  :admin_id, d.user_id, NULL, f.amount_xnrt,
  'deposit', d.id, TRUE, d.created_at
FROM deposits d
JOIN fallback_commission_events f ON f.deposit_id = d.id
LEFT JOIN referral_commissions rc
  ON rc.source_id = d.id
  AND rc.recipient_user_id = :admin_id
  AND rc.is_company_fallback = TRUE
WHERE rc.id IS NULL;
```

*(Adjust table/column names to your schema.)*

# Referral-page queries (works for both A & B)

**Totals**

```sql
-- Direct/L2/L3 (user’s real network)
SELECT
  SUM(CASE WHEN level=1 THEN amount_xnrt ELSE 0 END) AS level1_total,
  SUM(CASE WHEN level=2 THEN amount_xnrt ELSE 0 END) AS level2_total,
  SUM(CASE WHEN level=3 THEN amount_xnrt ELSE 0 END) AS level3_total
FROM referral_commissions
WHERE recipient_user_id = :me
  AND is_company_fallback = FALSE;

-- Company fallback
SELECT COALESCE(SUM(amount_xnrt),0) AS fallback_total
FROM referral_commissions
WHERE recipient_user_id = :me
  AND is_company_fallback = TRUE;

-- Withdrawable balance (single source of truth)
SELECT referral_balance FROM wallets WHERE user_id = :me;
```

**UI guardrails**

* “Total referrals” should **not** count fallback rows.
* “Commission balance (withdrawable)” = wallet/referral_balance (single source).

# QR code: the bulletproof pattern

**Common React pattern**

```tsx
import { useEffect, useRef } from "react";
import QRCode from "qrcode";

export function ReferralQR({ url, open }: { url: string; open: boolean }) {
  const canvasRef = useRef<HTMLCanvasElement | null>(null);

  useEffect(() => {
    if (!open) return;
    // ensure element exists and we’re on client
    const el = canvasRef.current;
    if (!el) return;

    // draw AFTER the dialog is actually mounted
    const id = requestAnimationFrame(() => {
      QRCode.toCanvas(el, url, { width: 240, margin: 1 }).catch(console.error);
    });
    return () => cancelAnimationFrame(id);
  }, [url, open]);

  return (
    <dialog open={open}>
      <canvas ref={canvasRef} />
    </dialog>
  );
}
```

**If using Next.js**

* Import the QR component **dynamically** to avoid SSR DOM usage:

```ts
const ReferralQR = dynamic(() => import("./ReferralQR"), { ssr: false });
```

**If using a library modal**

* Generate the QR in `onOpenChange(true)` or `onAfterOpen` hook (depending on lib), not on button click, so the canvas exists.

**If you used a selector**

* Prefer `ref` over `document.getElementById`. If you must select, run it **inside** `setTimeout(..., 0)` or `requestAnimationFrame` after the modal opens.

# Implementation checklist (short)

* [ ] Choose **Option A** (quick) or **Option B** (proper ledger).
* [ ] Refactor Referrals page to read a single **withdrawable commission balance** source.
* [ ] Add **“Company Fallback”** bucket (and exclude from “My referrals count”).
* [ ] (If B) Backfill historic fallback commissions into the log table.
* [ ] Fix QR code rendering with `ref` + draw on modal mount (and disable SSR for that component).
* [ ] Add an automated test: deposit with missing levels → admin gets fallback → Referrals summary shows fallback, Withdrawals shows same balance.

# A few spec ambiguities to lock down (so this doesn’t bite later)

* **What generates commissions?** Prompt 4 says “Automatic commission calculation on all earning activities” but the bullet under it says “Deposit bonuses generate commissions”. Decide: **only deposits** (recommended), or also mining/staking profits?
* **Admin visibility:** Should fallback amounts appear under “My referrals”? (I recommend **a separate bucket** so leaderboards aren’t skewed.)
* **Minimum withdrawal rule:** You wrote “min 5000 XNRT for mined/referral commissions”. Confirm whether this applies **per source** or **combined**.
* **Units clash:** XP vs XNRT in gamification (e.g., “Referral signup: +100 xnrt”). If that’s meant to be XP, rename to `+100 XP` to avoid confusion.

If you want me to write the tiny patch for **A (UI)** or the **B (backend + backfill)** version, say which one and I’ll draft the exact code paths you can paste in.
