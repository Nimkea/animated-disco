Great—thanks for sharing **server/index.ts**. Here’s what I see and what I’d check next.

## What looks good

* `app.set('trust proxy', 1)` ✅ (needed for secure cookies behind a proxy)
* Helmet configured and relaxed in dev ✅
* CORS has `credentials: true` ✅
* Logging, error handler, Vite vs static serving all fine ✅

## Potential issues / hardening

1. ### CORS origin is a single value

```ts
const CLIENT_URL = process.env.CLIENT_URL || 'http://localhost:5000';
app.use(cors({ origin: CLIENT_URL, credentials: true }));
```

If users hit the site from **[https://xnrt.org](https://xnrt.org)** (and possibly `https://www.xnrt.org` or a preview domain), this must exactly match `CLIENT_URL`. Otherwise credentialed requests (cookies) won’t be sent and auth-dependent routes (including the wallet challenge/confirm) can fail intermittently.

**Suggestion (safe & flexible):**

```ts
const allowedOrigins = [
  'http://localhost:5000',
  'https://xnrt.org',
  'https://www.xnrt.org',
  process.env.CLIENT_URL, // keep env override
].filter(Boolean);

app.use(cors({
  credentials: true,
  origin(origin, cb) {
    // allow same-origin (no origin header) and listed domains
    if (!origin || allowedOrigins.includes(origin)) return cb(null, true);
    return cb(new Error(`CORS blocked for origin: ${origin}`));
  },
}));
```

2. ### Helmet CSP may block QR/iframes in future

Right now you have:

```ts
frameSrc: ["'none'"],
```

WalletConnect v2 modal and some analytics widgets may use iframes. If you add those, production could break.

**Suggestion (minimal change):**

```ts
frameSrc: ["'self'", "https:"],
```

(Keep it strict—if later you know exact hosts, pin them.)

3. ### Double-check cookie settings in auth routes

You set/clear cookies in `server/auth/routes.ts`. For MetaMask/Trust Wallet webviews you generally need:

* `sameSite: 'none'`
* `secure: true` (and `trust proxy` is already set ✅)

Please ensure your **login**, **verify-email (auto-login)**, and **logout** cookie ops use that in production. (You mentioned those lines earlier; this is the place it matters.)

---

## Why your latest tests worked

* In the MetaMask in-app browser you were logged in, cookies were accepted, and the challenge/confirm flow succeeded. ✅
* In a regular desktop browser without MetaMask, the UI showed the new manual flow and worked as designed (challenge generated, user signs elsewhere, paste signature). ✅

That means the server surface is largely fine; the two things most likely to bite you in production are **CORS origin mismatch** and **cookie attributes**.

---

## Next files I’d like to analyze

To finish the audit and make wallet linking bulletproof, please share:

1. **`server/routes.ts`** (or wherever `/api/wallet/link/challenge` and `/api/wallet/link/confirm` live)
2. **`server/auth/middleware.ts`** (for `requireAuth`, rate limits, and how `req.authUser` is set)
3. **`shared/schema.ts`** and **`server/services/db.ts`** (to confirm whether nonce is session- or DB-backed)

With those, I’ll give exact line-level tweaks (including DB-backed nonce option if you want maximum reliability).
