Love this. You’ve captured it perfectly. Here’s a **crisp, Replit-agent task list** to implement the auto-deposit flow you want (bind wallet → auto-credit off-chain XNRT; withdrawals stay manual), plus acceptance checks.

# Scope

* Replace “tx-hash + screenshot” flow with **bind wallet + auto-credit**.
* Keep a **Report Missing** path for edge cases.
* Admin approvals remain only for withdrawals (and exception handling).

# Tasks for the Replit agent

## 1) DB (Drizzle)

Add these tables to `shared/schema.ts`:

* `LinkedWallet(userId, address [unique], verified, createdAt)`
* `ChainCursor(id, block, updatedAt)`  // e.g., `'bsc:usdt:toTreasury'`
* `TokenLedger(id, userId, kind, amount, meta, createdAt)` // `kind: 'mint_deposit'`
* `UnmatchedDeposit(txHash [pk], from, to, usdtAmount, blockNumber, note, createdAt)` // for exchange/pooled or unlinked senders
* `SignNonce(id, userId, nonce [unique], expiresAt, usedAt, createdAt)` // for signature-based linking
* Add unique to `Transaction`: **(transactionHash, type)**

## 2) Secrets (Replit)

Set/update:

```
RPC_BSC_URL=https://bsc-dataseed.binance.org/
USDT_BSC_ADDRESS=0x55d398326f99059fF775485246999027B3197955
XNRT_WALLET=0x715C32deC9534d2fB34e0B567288AF8d895efB59
BSC_CONFIRMATIONS=12
AUTO_DEPOSIT=true
XNRT_RATE_USDT=100
APP_DOMAIN=<your-domain>         # for sign message
NONCE_TTL_MIN=10                 # optional
```

## 3) Wallet linking (secure, signature-based)

In `server/routes.ts`:

* `GET /api/wallet/link/challenge?address=0x…` → create nonce, return EIP-191 message.
* `POST /api/wallet/link/confirm` `{ address, signature, nonce }`
  → `verifyMessage`, upsert `LinkedWallet(address.lowercase)`, mark verified; reject if nonce expired/used or address is linked to another user.

Also keep:

* `GET /api/wallet/me` → list my linked wallets.
* (Optional) `DELETE /api/wallet/unlink`.

## 4) Background watcher (BSC USDT → Treasury)

Create `server/services/bscWatcher.ts`:

* Provider = `ethers.JsonRpcProvider(RPC_BSC_URL)`.
* Filter `Transfer(address from, address to, uint256 value)` where `address == USDT_BSC_ADDRESS` and `to == XNRT_WALLET`.
* Process ranges with a **confirmations gap** (`latest - REQ_CONF`), store progress in `ChainCursor`.
* For each log:

  * Check `Transaction(transactionHash, type='deposit')` not already processed.
  * If **sender not linked**, `INSERT` into `UnmatchedDeposit` and skip.
  * Get receipt & ensure `status == 1` and `confirmations >= REQ_CONF`.
  * **Retroactive guard:** only credit if `linked.createdAt < tx.blockTime`.
  * Amounts: `usdt = formatUnits(value, 18)` → `xnrt = usdt * XNRT_RATE_USDT` (decimal-safe; no JS `Number` drift).
  * In one DB transaction:

    * `INSERT Transaction` (approved, verified=true, confirmations, `verificationData` with {auto:true, from, usdt}).
    * `UPDATE Balance` (`xnrtBalance += xnrt`, `totalEarned += xnrt`).
    * `INSERT TokenLedger(kind='mint_deposit', amount=xnrt, meta={txHash, usdt})`.
  * Delete from `UnmatchedDeposit` if previously inserted.
* **Guards:** single-runner + hot-reload flag; retry/backoff on `getLogs`.

Start it in `server/index.ts` after server starts:

```ts
import { startBscUsdtWatcher } from "./services/bscWatcher";
startRetryWorker();
startBscUsdtWatcher();
```

## 5) Admin endpoints (exceptions only)

In `server/routes.ts`:

* `GET /api/admin/unmatched-deposits` → list latest (role-protected).
* `POST /api/admin/unmatched-deposits/:txHash/match` → after user links, do the same crediting transaction then delete the unmatched row.
* (Optional) **Deposit Reports**:

  * Table `DepositReport` (user-filed complaint).
  * `POST /api/deposits/report` (user).
  * `GET /api/admin/deposit-reports`, `POST /api/admin/deposit-reports/:id/resolve` (admin can optionally credit).

## 6) Deposit page UI

Replace old widgets:

* **Link card** (“Link with MetaMask”) → calls challenge/confirm endpoints.
* **Treasury instructions** (show treasury, network, token contract, 18 decimals, and “auto-credit after ~12 confirmations”).
* **Report Missing** card (simple form: fromAddress, approx amount, optional tx hash/notes).

## 7) Make verification non-blocking in Admin

* Keep “Verify on BSC” button as **informational** only.
* Approve button is **always enabled** (happy path is auto-credit anyway).
* Add “Unmatched” & “Deposit Reports” tabs for exception handling.

## 8) Dependencies

Ensure:

```
npm i ethers drizzle-orm
```

(You already have Neon + Drizzle wired.)

## 9) Security & correctness switches

* Address handling: store lowercase; display checksummed.
* Idempotency: unique `(transactionHash, type)`.
* Retroactive: `linked.createdAt < tx.blockTime` must pass.
* Decimal-safe arithmetic (avoid JS floats).
* Only **USDT on BSC (18 dec)** is counted.

---

# Acceptance criteria (verify on Replit)

1. **Bind → Auto-credit**

   * Link MetaMask address.
   * Send 1–2 USDT (BEP-20) from that address → treasury.
   * After ~12 confs:

     * `Balance.xnrtBalance` increases by `usdt * 100`.
     * `Transaction` row: `type='deposit'`, `status='approved'`, `verified=true`, `transactionHash=0x…`.
     * `TokenLedger`: `kind='mint_deposit'`, `amount` matches credit, `meta.txHash` present.

2. **Unlinked sender → Unmatched**

   * Send from an unlinked address → row appears in `/api/admin/unmatched-deposits`.
   * Link that address → **Match & Credit** works; ledger + balance updated; unmatched row removed.

3. **Deposit page UX**

   * No required tx-hash or screenshot.
   * “Report Missing” appears and submits.

4. **Withdrawals**

   * Current admin approval flow unchanged.

---

If you want, I can generate a **single patch** that makes all of these changes in your repo (schema + routes + watcher + basic UI components). Just say “ship the full autopay patch for Replit” and I’ll drop the ready-to-apply diff.
