That version will work, but a few fixes make it safer and less noisy:

**Issues in your snippet**

* `initMonitoring()` runs on every HMR reload → duplicate Sentry/Web-Vitals init.
* SW registration runs even where `navigator.serviceWorker` isn’t available (older browsers/SSR).
* No `StrictMode`.
* `updateSW` is used before it’s declared (works but better to define once).

**Drop-in, hardened `main.tsx`**

```ts
import React from "react";
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";
import { registerSW } from "virtual:pwa-register";
import { ThemeProvider } from "./contexts/theme-context";
import { initMonitoring } from "./lib/monitoring";

// --- Monitoring: prod-only, single init even with HMR ---
if (import.meta.env.PROD && !(window as any).__MONITORING_INIT__) {
  (window as any).__MONITORING_INIT__ = true;
  initMonitoring();
}

// --- PWA: feature-check & lazy register ---
let updateSW: (reloadPage?: boolean) => void = () => {};
if (typeof window !== "undefined" && "serviceWorker" in navigator) {
  updateSW = registerSW({
    immediate: false,
    onNeedRefresh() {
      const update = () => updateSW(true);
      window.dispatchEvent(new CustomEvent("sw-update-available", { detail: { update } }));
    },
    onOfflineReady() {
      window.dispatchEvent(new CustomEvent("sw-offline-ready"));
      console.log("App ready to work offline");
    },
  });
}

const el = document.getElementById("root");
if (!el) throw new Error("#root not found");

createRoot(el).render(
  <React.StrictMode>
    <ThemeProvider>
      <App />
    </ThemeProvider>
  </React.StrictMode>
);
```

**Why this is better**

* Monitoring only in **production** and only **once** (prevents double Sentry clients during HMR).
* SW only registers when supported; won’t run in SSR/old browsers.
* Emits the same custom events you were listening for (`sw-update-available`, `sw-offline-ready`).
* Keeps type safety and StrictMode.

If you still see `Pre-transform error: /src/main.tsx` after this, it’s not the file; it’s Vite’s **root** path. Make sure your `vite.config.ts` sets `root: "client"` (since your `src` is inside `client/`) and `publicDir: "../public"`, and run `npm run dev` from repo root.
