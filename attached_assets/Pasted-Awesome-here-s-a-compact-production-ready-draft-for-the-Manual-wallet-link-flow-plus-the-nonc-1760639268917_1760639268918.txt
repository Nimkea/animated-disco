Awesome—here’s a compact, production-ready **draft** for the “Manual wallet link” flow plus the nonce-in-DB change. You can paste these in with minimal edits.

---

# 1) Prisma: store nonces (and ensure linked wallets table)

**`prisma/schema.prisma`**

```prisma
model LinkedWallet {
  id        String   @id @default(cuid())
  userId    String
  address   String   // lowercase
  chainId   Int
  createdAt DateTime @default(now())

  @@unique([userId, address])
  @@index([userId])
}

model WalletNonce {
  id        String   @id @default(cuid())
  userId    String
  address   String   // lowercase
  nonce     String
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([userId, address])
  @@index([expiresAt])
}
```

Then:

```bash
npm run db:push
```

*(If `LinkedWallet` already exists, keep yours and only add `WalletNonce`.)*

---

# 2) Server: challenge + confirm (DB-backed nonce)

**`server/wallet/routes.ts`** (or add to your existing wallet router)

```ts
import { Router } from 'express';
import { PrismaClient } from '@prisma/client';
import { requireAuth } from '../auth/middleware';
import crypto from 'crypto';
import { ethers } from 'ethers';

const router = Router();
const prisma = new PrismaClient();

/**
 * GET /api/wallet/link/challenge?address=0x....
 * Auth required. NO CSRF here.
 */
router.get('/link/challenge', requireAuth, async (req, res) => {
  try {
    const address = String((req.query.address || '')).toLowerCase();
    if (!/^0x[a-f0-9]{40}$/.test(address)) {
      return res.status(400).json({ message: 'Invalid address' });
    }

    const nonce = crypto.randomBytes(16).toString('hex');
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000);

    await prisma.walletNonce.upsert({
      where: { userId_address: { userId: req.authUser!.id, address } },
      update: { nonce, expiresAt, issuedAt: new Date() },
      create: { userId: req.authUser!.id, address, nonce, expiresAt },
    });

    const issuedAt = new Date().toISOString();
    const message =
      `XNRT Wallet Link\n\n` +
      `Address: ${address}\n` +
      `Nonce: ${nonce}\n` +
      `Issued: ${issuedAt}`;

    res.json({ message, nonce, issuedAt });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'Failed to generate challenge' });
  }
});

/**
 * POST /api/wallet/link/confirm
 * { address, signature, nonce, issuedAt }
 * Auth + CSRF required (you already validate CSRF in middleware or header)
 */
router.post('/link/confirm', requireAuth, async (req, res) => {
  try {
    const { address, signature, nonce, issuedAt } = req.body as {
      address: string; signature: string; nonce: string; issuedAt: string;
    };
    const normalized = String(address || '').toLowerCase();

    const rec = await prisma.walletNonce.findUnique({
      where: { userId_address: { userId: req.authUser!.id, address: normalized } },
    });
    if (!rec || rec.nonce !== nonce || rec.expiresAt < new Date()) {
      return res.status(400).json({ message: 'Invalid or expired challenge' });
    }

    const message =
      `XNRT Wallet Link\n\n` +
      `Address: ${normalized}\n` +
      `Nonce: ${nonce}\n` +
      `Issued: ${issuedAt}`;

    // Recover signer
    let recovered: string;
    try {
      recovered = ethers.verifyMessage(message, signature).toLowerCase();
    } catch {
      return res.status(400).json({ message: 'Invalid signature' });
    }
    if (recovered !== normalized) {
      return res.status(400).json({ message: 'Signature does not match address' });
    }

    await prisma.$transaction([
      prisma.walletNonce.delete({ where: { id: rec.id } }),
      prisma.linkedWallet.upsert({
        where: { userId_address: { userId: req.authUser!.id, address: normalized } },
        update: {},
        create: { userId: req.authUser!.id, address: normalized, chainId: 56 },
      }),
    ]);

    res.json({ address: normalized });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: 'Failed to link wallet' });
  }
});

export default router;
```

> Keep CSRF validation on **confirm** only; leave **challenge** without CSRF (auth only).
> Make sure your cookie settings use `SameSite: "none"` & `secure: true` in production.

---

# 3) Client: Manual modal (copy → sign in wallet → paste signature → confirm)

**`client/src/components/manual-link-wallet-dialog.tsx`**

```tsx
import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";

type Props = {
  open: boolean;
  onOpenChange: (v: boolean) => void;
  onLinked?: (address: string) => void;
};

export default function ManualLinkWalletDialog({ open, onOpenChange, onLinked }: Props) {
  const { toast } = useToast();
  const [address, setAddress] = useState("");
  const [challenge, setChallenge] = useState<{ message: string; nonce: string; issuedAt: string } | null>(null);
  const [signature, setSignature] = useState("");
  const [loading, setLoading] = useState(false);
  const [step, setStep] = useState<1 | 2>(1);

  const getChallenge = async () => {
    try {
      setLoading(true);
      const res = await fetch(`/api/wallet/link/challenge?address=${address.trim().toLowerCase()}`, {
        credentials: "include",
      });
      if (res.status === 401) throw new Error("Please log in in this browser first.");
      if (!res.ok) throw new Error((await res.json()).message || "Failed to get challenge");
      const data = await res.json();
      setChallenge(data);
      setStep(2);
      toast({ title: "Challenge created", description: "Copy the message and sign it in your wallet app." });
    } catch (e: any) {
      toast({ variant: "destructive", title: "Error", description: e.message });
    } finally {
      setLoading(false);
    }
  };

  const confirm = async () => {
    if (!challenge) return;
    try {
      setLoading(true);
      const res = await fetch("/api/wallet/link/confirm", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-csrf-token": (window as any).CSRF_TOKEN,
        },
        credentials: "include",
        body: JSON.stringify({
          address: address.trim().toLowerCase(),
          signature: signature.trim(),
          nonce: challenge.nonce,
          issuedAt: challenge.issuedAt,
        }),
      });
      if (res.status === 401) throw new Error("Please log in in this browser first.");
      if (res.status === 403) throw new Error("Security token missing/invalid. Refresh and try again.");
      if (!res.ok) throw new Error((await res.json()).message || "Failed to link wallet");
      const data = await res.json();
      toast({ title: "Wallet linked", description: `${data.address.slice(0, 6)}...${data.address.slice(-4)}` });
      onLinked?.(data.address);
      onOpenChange(false);
      // reset
      setAddress(""); setSignature(""); setChallenge(null); setStep(1);
    } catch (e: any) {
      toast({ variant: "destructive", title: "Linking failed", description: e.message });
    } finally {
      setLoading(false);
    }
  };

  const copy = async () => {
    if (challenge?.message) {
      await navigator.clipboard.writeText(challenge.message);
      toast({ title: "Copied", description: "Challenge message copied to clipboard" });
    }
  };

  const disabledAddr = !/^0x[a-fA-F0-9]{40}$/.test(address.trim());

  return (
    <Dialog open={open} onOpenChange={(v) => { if (!loading) onOpenChange(v); }}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle>Link Wallet Manually</DialogTitle>
        </DialogHeader>

        {step === 1 && (
          <div className="space-y-3">
            <label className="text-sm">Wallet Address (BSC)</label>
            <Input
              placeholder="0x..."
              value={address}
              onChange={(e) => setAddress(e.target.value)}
              autoFocus
            />
            <p className="text-xs text-muted-foreground">
              We’ll generate a challenge for you to sign in your wallet app.
            </p>
          </div>
        )}

        {step === 2 && challenge && (
          <div className="space-y-3">
            <div>
              <div className="flex items-center justify-between mb-2">
                <label className="text-sm">Challenge Message</label>
                <Button variant="outline" size="sm" onClick={copy}>Copy</Button>
              </div>
              <Textarea value={challenge.message} readOnly rows={6} />
              <p className="text-xs text-muted-foreground mt-1">
                Sign this exact message with the same address using
                <span className="font-medium"> personal_sign</span> (MetaMask/Trust Wallet → “Sign Message”).
              </p>
            </div>
            <div>
              <label className="text-sm">Signature</label>
              <Textarea
                placeholder="0x…"
                value={signature}
                onChange={(e) => setSignature(e.target.value)}
                rows={3}
              />
            </div>
          </div>
        )}

        <DialogFooter className="gap-2">
          {step === 1 ? (
            <Button onClick={getChallenge} disabled={disabledAddr || loading}>
              {loading ? "Generating…" : "Get Challenge"}
            </Button>
          ) : (
            <>
              <Button variant="outline" onClick={() => setStep(1)} disabled={loading}>Back</Button>
              <Button onClick={confirm} disabled={!signature.trim() || loading}>
                {loading ? "Linking…" : "Confirm Link"}
              </Button>
            </>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
```

---

# 4) Hook the dialog into your existing card

Add a “Having trouble?” button to open the manual dialog.

**`client/src/components/link-wallet-card.tsx`** (only the additions shown)

```tsx
import ManualLinkWalletDialog from "@/components/manual-link-wallet-dialog";
// ...
export function LinkWalletCard() {
  // ...
  const [manualOpen, setManualOpen] = useState(false);

  // after successful auto-link
  const onLinked = (addr: string) => {
    if (!linked.includes(addr)) setLinked((prev) => [addr, ...prev]);
  };

  return (
    <Card /* ... */>
      {/* ...existing UI... */}
      <div className="mt-3">
        <Button variant="link" className="px-0 text-amber-500" onClick={() => setManualOpen(true)}>
          Having trouble? Link manually
        </Button>
      </div>

      <ManualLinkWalletDialog open={manualOpen} onOpenChange={setManualOpen} onLinked={onLinked} />
    </Card>
  );
}
```

---

# 5) (Optional) Cookie hardening for WebViews

Ensure session/JWT cookies are usable in MetaMask/Trust:

```ts
// server/index.ts (or wherever express-session is configured)
app.set('trust proxy', 1);
const isProd = process.env.NODE_ENV === 'production';
app.use(session({
  secret: process.env.SESSION_SECRET!,
  resave: false,
  saveUninitialized: false,
  cookie: {
    httpOnly: true,
    secure: isProd,
    sameSite: 'none',
    domain: process.env.COOKIE_DOMAIN, // e.g. ".xnrt.org"
  }
}));
```

---

## What this gives you

* ✅ **Works everywhere**: mobile Chrome/Safari, MetaMask/Trust WebViews, desktop
* ✅ **Nonce persistence** without relying on fragile session state
* ✅ **Clear UX fallback** if WalletConnect/injected provider fails
* ✅ **Security preserved**: auth required, CSRF on confirm, signatures verified

If you want, I can also draft a tiny **server health check** for `/api/wallet/me` to show linked wallets and a quick **cron** to purge expired nonces.
