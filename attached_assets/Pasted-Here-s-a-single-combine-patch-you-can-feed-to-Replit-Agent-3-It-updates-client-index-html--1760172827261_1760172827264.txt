Here’s a **single combine patch** you can feed to Replit Agent 3.
It updates `client/index.html`, `public/sw.js`, `public/manifest.json`, `client/src/index.css`, **adds** `public/offline.html`, and fixes `client/src/main.tsx`.

> If any path is slightly different in your repo, tweak the file paths in the headers.

```
*** Begin Patch
*** Update File: client/index.html
@@
-    <meta name="theme-color" content="#000000" />
+    <meta name="theme-color" media="(prefers-color-scheme: light)" content="#fffafa">
+    <meta name="theme-color" media="(prefers-color-scheme: dark)"  content="#000000">
@@
-    <script type="module" src="/src/main.tsx"></script>
+    <script type="module" src="/src/main.tsx"></script>
+    <script>
+      if ('serviceWorker' in navigator) {
+        navigator.serviceWorker.register('/sw.js');
+      }
+    </script>
   </body>
 </html>
*** End Patch
```

```
*** Begin Patch
*** Update File: public/sw.js
+// /public/sw.js
+const VERSION = "v3";                       // bump on each deploy
+const CACHE_HTML   = `xnrt-html-${VERSION}`;
+const CACHE_STATIC = `xnrt-static-${VERSION}`;
+
+const PRECACHE_URLS = [
+  "/",
+  "/index.html",
+  "/manifest.json",
+  "/offline.html",
+  "/icon-192.png",
+  "/icon-512.png"
+];
+
+self.addEventListener("install", (event) => {
+  event.waitUntil(
+    caches.open(CACHE_STATIC)
+      .then((cache) => cache.addAll(PRECACHE_URLS))
+      .then(() => self.skipWaiting())
+  );
+});
+
+self.addEventListener("activate", (event) => {
+  event.waitUntil((async () => {
+    if ("navigationPreload" in self.registration) {
+      try { await self.registration.navigationPreload.enable(); } catch {}
+    }
+    const keys = await caches.keys();
+    await Promise.all(keys.map((k) => {
+      if (![CACHE_HTML, CACHE_STATIC].includes(k)) return caches.delete(k);
+    }));
+    await self.clients.claim();
+  })());
+});
+
+self.addEventListener("fetch", (event) => {
+  const req = event.request;
+  if (req.method !== "GET") return;
+
+  // Navigations (HTML): network-first with offline fallback
+  if (req.mode === "navigate") {
+    event.respondWith((async () => {
+      try {
+        const preload = await event.preloadResponse;
+        const net = preload || await fetch(req);
+        const c = await caches.open(CACHE_HTML);
+        c.put(req, net.clone());
+        return net;
+      } catch {
+        const c = await caches.open(CACHE_HTML);
+        const cached = await c.match(req);
+        return cached || caches.match("/offline.html");
+      }
+    })());
+    return;
+  }
+
+  // Same-origin JS/CSS/workers: stale-while-revalidate
+  const sameOrigin = new URL(req.url).origin === self.location.origin;
+  if (sameOrigin && ["script","style","worker"].includes(req.destination)) {
+    event.respondWith((async () => {
+      const cache = await caches.open(CACHE_STATIC);
+      const cached = await cache.match(req);
+      const network = fetch(req).then(res => {
+        if (res.ok) cache.put(req, res.clone());
+        return res;
+      }).catch(() => undefined);
+      return cached || network || fetch(req);
+    })());
+    return;
+  }
+
+  // Images / fonts / everything else: cache-first + background refresh
+  event.respondWith((async () => {
+    const cache = await caches.open(CACHE_STATIC);
+    const cached = await cache.match(req);
+    if (cached) {
+      fetch(req).then(res => {
+        if (res && (res.ok || res.type === "opaque")) cache.put(req, res.clone());
+      }).catch(() => {});
+      return cached;
+    }
+    try {
+      const res = await fetch(req);
+      if (res && (res.ok || res.type === "opaque")) cache.put(req, res.clone());
+      return res;
+    } catch {
+      return cached || Response.error();
+    }
+  })());
+});
+
+self.addEventListener("message", (event) => {
+  if (event.data === "SKIP_WAITING") self.skipWaiting();
+});
*** End Patch
```

```
*** Begin Patch
*** Add File: public/offline.html
+<!doctype html>
+<html lang="en">
+<head>
+  <meta charset="utf-8" />
+  <meta name="viewport" content="width=device-width,initial-scale=1" />
+  <title>Offline — XNRT</title>
+  <meta name="color-scheme" content="dark light">
+  <style>
+    :root { --bg:#000; --card:#17181c; --text:#e7e9ea; --accent:#8e7b57; }
+    @media (prefers-color-scheme: light) {
+      :root { --bg:#fffafa; --card:#fefbf0; --text:#0f1419; --accent:#8e7b57; }
+    }
+    html,body{height:100%;margin:0}
+    body{background:var(--bg);color:var(--text);font:16px/1.5 system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;display:grid;place-items:center}
+    .card{background:var(--card);padding:24px 28px;border-radius:16px;max-width:560px;box-shadow:0 10px 30px rgb(0 0 0 / .25)}
+    h1{margin:0 0 8px;font-size:22px}
+    p{margin:8px 0 0}
+    a{color:var(--accent);text-decoration:none}
+  </style>
+  </head>
+<body>
+  <div class="card">
+    <h1>You're offline</h1>
+    <p>Some content isn’t available right now. We’ll refresh when you’re back online.</p>
+    <p><a href="/">Go to Home</a></p>
+  </div>
+</body>
+</html>
*** End Patch
```

```
*** Begin Patch
*** Update File: public/manifest.json
@@
-{
-  "name": "XNRT - We Build the NextGen",
-  "short_name": "XNRT",
-  "description": "Off-chain gamification earning platform. Earn XNRT tokens through staking, mining, referrals, and task completion.",
-  "start_url": "/",
-  "display": "standalone",
-  "background_color": "#000000",
-  "theme_color": "#000000",
-  "orientation": "portrait-primary",
-  "icons": [
-    {
-      "src": "/icon-192.png",
-      "sizes": "192x192",
-      "type": "image/png",
-      "purpose": "any maskable"
-    },
-    {
-      "src": "/icon-512.png",
-      "sizes": "512x512",
-      "type": "image/png",
-      "purpose": "any maskable"
-    }
-  ]
-}
+{
+  "id": "/?app-id=xnrt",
+  "name": "XNRT - We Build the NextGen",
+  "short_name": "XNRT",
+  "description": "Off-chain gamification earning platform. Earn XNRT tokens through staking, mining, referrals, and task completion.",
+  "lang": "en",
+  "dir": "ltr",
+  "start_url": "/?source=pwa",
+  "scope": "/",
+  "display": "standalone",
+  "background_color": "#000000",
+  "theme_color": "#000000",
+  "orientation": "portrait-primary",
+  "icons": [
+    { "src": "/icon-192.png", "sizes": "192x192", "type": "image/png", "purpose": "any maskable" },
+    { "src": "/icon-512.png", "sizes": "512x512", "type": "image/png", "purpose": "any maskable" }
+  ],
+  "shortcuts": [
+    { "name": "Get Started", "url": "/auth" },
+    { "name": "Staking", "url": "/staking" },
+    { "name": "Mining", "url": "/mining" }
+  ]
+}
*** End Patch
```

```
*** Begin Patch
*** Update File: client/src/index.css
@@
-  --popover: 45 25% 97%;
-  --popover-foreground: 0 0% 100%;
+  --popover: 45 25% 97%;
+  /* Dark text on light popover for AA */
+  --popover-foreground: 0 0% 10.2%;
   --popover-border: 0 0% 85%;
 
-  --primary: 342 85.11% 52.55%;
-  --primary-foreground: 0 0% 100%;
+  /* Brand primary = gold, with charcoal text (AA) */
+  --primary: 42 90% 50%;
+  --primary-foreground: 0 0% 10.2%;
@@
-  --ring: 0 0% 41.96%;
+  /* Brand ring + button states */
+  --ring: 42 90% 40%;
+  --primary-hover: 42 90% 45%;
+  --primary-active: 42 90% 42%;
@@
-  --font-sans: 'Poppins', sans-serif;
-  --font-serif: 'Poppins', sans-serif;
+  /* Fonts to match actual imports */
+  --font-sans: 'Space Grotesk', sans-serif;
+  --font-serif: 'Lora', serif;
@@
-  --primary: 9 75% 61%;
-  --primary-foreground: 0 0% 100%;
+  /* Same gold in dark theme, charcoal text for AA */
+  --primary: 42 90% 50%;
+  --primary-foreground: 0 0% 10.2%;
@@
-  --destructive: 356.3033 90.5579% 54.3137%;
+  /* Slightly darker red so white text passes AA */
+  --destructive: 356.3033 90.5579% 48.3137%;
   --destructive-foreground: 0 0% 100%;
@@
-  --ring: 9 75% 61%;
+  --ring: 42 90% 40%;
+  --primary-hover: 42 90% 45%;
+  --primary-active: 42 90% 42%;
@@
-  --font-sans: Open Sans, sans-serif;
-  --font-serif: Georgia, serif;
+  --font-sans: 'Space Grotesk', sans-serif;
+  --font-serif: 'Lora', serif;
*** End Patch
```

```
*** Begin Patch
*** Update File: client/src/main.tsx
+import React from "react";
+import ReactDOM from "react-dom/client";
+import App from "./App";
+import "./index.css";
+
+ReactDOM.createRoot(document.getElementById("root")!).render(
+  <React.StrictMode>
+    <App />
+  </React.StrictMode>
+);
*** End Patch
```

---

### What this patch does

* Makes your PWA installable & robust offline (`sw.js` + `offline.html`).
* Upgrades the manifest with id/scope and real shortcuts.
* Introduces AA-safe **gold** primary with proper text contrast and states.
* Fixes `main.tsx` to be a proper React entry (your previous file content was CSS).
* Adds light/dark aware `theme-color` meta and SW registration in `index.html`.

Apply the patch, rebuild, and in DevTools > Application verify:

* **Manifest** valid, **Installability: yes**
* **Service Worker** activated (bump `VERSION` if needed)
* Offline navigation shows `offline.html`
* Buttons appear gold with dark text; hover/active states work.
