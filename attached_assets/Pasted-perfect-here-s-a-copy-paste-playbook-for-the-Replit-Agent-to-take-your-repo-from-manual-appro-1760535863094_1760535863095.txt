perfect — here’s a **copy-paste playbook for the Replit Agent** to take your repo from “manual approval” → **auto-verified, auto-credited off-chain XNRT** on BSC.

---

# Replit Agent — single message plan (paste this)

**Goal:** Enable auto-deposit watcher for BSC USDT → auto-credit off-chain XNRT; add unmatched-deposit workflow; start watcher on boot.

**Do this exactly, in order:**

1. **Open workspace & install deps**

```bash
# ensure deps
npm i ethers drizzle-orm
```

2. **Create new schema tables (Drizzle)**

* Edit `shared/schema.ts`:

  * Add tables: `LinkedWallet`, `ChainCursor`, `UnmatchedDeposit`, `TokenLedger`.
  * In `Transaction` table, add a unique index on `(transactionHash, type)` to guarantee idempotency.

> If you prefer, generate a migration; otherwise apply via your normal Drizzle sync step.

3. **Add BSC watcher**

* Create `server/services/bscWatcher.ts` that:

  * scans USDT `Transfer` logs where `to == XNRT_WALLET`,
  * waits `BSC_CONFIRMATIONS`,
  * auto-credits deposits for **pre-linked** senders,
  * writes **Transaction (approved)**, updates **Balance**, and appends **TokenLedger (mint_deposit)**,
  * if no linked sender (or link is after tx timestamp), insert into **UnmatchedDeposit**,
  * uses a **hot-reload + concurrency guard** and advances **ChainCursor** only after successful chunks.

4. **Start watcher on boot**

* In `server/index.ts` add:

  ```ts
  import { startBscUsdtWatcher } from "./services/bscWatcher";
  // … inside server.listen callback (after startRetryWorker())
  startBscUsdtWatcher();
  ```

5. **Admin endpoints**

* In `server/routes.ts`:

  * Import `db` and `@shared/schema` (Drizzle).
  * Add:

    * `GET /api/admin/unmatched-deposits` (admin only): list latest 200.
    * `POST /api/admin/unmatched-deposits/:txHash/match` (admin only): after user links the sender, credit deposit, increment Balance, write TokenLedger, and delete the unmatched row.

6. **Env (Secrets)**
   Set these in Replit Secrets:

```
RPC_BSC_URL=https://bsc-dataseed.binance.org/
USDT_BSC_ADDRESS=0x55d398326f99059fF775485246999027B3197955
XNRT_WALLET=<YOUR_TREASURY_ADDRESS>
BSC_CONFIRMATIONS=12
AUTO_DEPOSIT=true
XNRT_RATE_USDT=100
```

7. **Schema sync**

* Run your Drizzle schema sync/migration for the new tables & unique index.

8. **Restart server**

---

# Acceptance tests (Agent: run/verify)

1. **Link a wallet (already in your app):**

* Link a self-custody BSC address (MetaMask/Trust).
  (If you want signature-based linking, tell me and I’ll merge that flow; it’s ready.)

2. **Make a small USDT transfer** (BEP-20) from the linked address → `XNRT_WALLET`.

3. **Watch logs:**

* In server logs, expect:

  * `... USDT -> treasury` for block ranges
  * `Credited <amount> XNRT for user <id> (tx <hash>)`

4. **Database assertions:**

* `Transaction` row with `type='deposit'`, `status='approved'`, `transactionHash=<tx>`, `verified=true`, `confirmations>=BSC_CONFIRMATIONS`.
* `Balance` updated: `xnrtBalance` and `totalEarned` incremented by `USDT * XNRT_RATE_USDT`.
* `TokenLedger` contains `kind='mint_deposit'`, `amount` == credited XNRT, `meta.txHash` == tx hash.

5. **Unmatched flow (edge case):**

* Send from an unlinked address → it should appear in `/api/admin/unmatched-deposits`.
* Link that sender, then `POST /api/admin/unmatched-deposits/:txHash/match` → should credit and remove from unmatched.

---

# Production hardening (Agent: confirm)

* **Idempotency:** Unique constraint on `(transactionHash, type)` present and enforced.
* **Retroactive linking guard:** Credit **only if** `linked.createdAt < tx.blockTime`.
* **Concurrency guard:** Single active loop; hot-reload safe.
* **Cursor safety:** Advance `ChainCursor` **after** successful processing.
* **Precision:** Use **decimal-safe math** (no `Number(...)` for amounts).
* **Retries:** Simple retry/backoff on `getLogs`/`getTransactionReceipt` (optional but recommended).
* **Security:** Admin endpoints are behind `requireAdmin`.

---

## Want me to hand you a ready diff?

I already generated a complete patch earlier. If you’d like me to **merge the signature-based linking** into this same patch and re-emit one combined file for your latest code snapshot, just say:
**“make a single combined patch with signature linking + watcher”** — I’ll produce it now.
