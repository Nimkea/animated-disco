You nailed the diagnosis. Here’s a clean, **apply-and-go** fix set that addresses all four issues (React chunking, CSP, dev-only plugins, and static serving) **plus** the Replit watcher limit.

---

# 1) `vite.config.ts` (drop-in)

* Single vendor chunk
* Dev-only Replit plugins
* PWA only “devOptions” in dev
* Polling watcher to avoid ENOSPC on Replit

```ts
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";
import { VitePWA } from "vite-plugin-pwa";

export default defineConfig(async ({ mode }) => {
  const isDev = mode === "development";
  const plugins = [react()];

  // Replit dev-only helpers (avoid in prod: they use eval)
  if (isDev && process.env.REPL_ID) {
    const { cartographer } = await import("@replit/vite-plugin-cartographer");
    const { devBanner } = await import("@replit/vite-plugin-dev-banner");
    plugins.push(cartographer(), devBanner());
  }

  plugins.push(
    VitePWA({
      strategies: "injectManifest",
      srcDir: "src",
      filename: "sw.ts",
      registerType: "prompt",
      injectRegister: "auto",
      devOptions: {
        enabled: isDev,
        type: "module",
        navigateFallback: "index.html",
      },
      includeAssets: [
        "favicon.ico",
        "apple-touch-icon.png",
        "favicon-16x16.png",
        "favicon-32x32.png",
      ],
      manifest: {
        id: "/?app-id=xnrt",
        name: "XNRT - We Build the NextGen",
        short_name: "XNRT",
        description:
          "Off-chain gamification earning platform. Earn XNRT tokens through staking, mining, referrals, and task completion.",
        start_url: "/?source=pwa",
        scope: "/",
        theme_color: "#000000",
        background_color: "#000000",
        display: "standalone",
        orientation: "portrait-primary",
        icons: [
          { src: "/icon-192.png", sizes: "192x192", type: "image/png", purpose: "any" },
          { src: "/icon-256.png", sizes: "256x256", type: "image/png", purpose: "any" },
          { src: "/icon-512.png", sizes: "512x512", type: "image/png", purpose: "any" },
          { src: "/icon-512-maskable.png", sizes: "512x512", type: "image/png", purpose: "maskable" },
        ],
        shortcuts: [
          { name: "Staking", short_name: "Stake", description: "Start staking XNRT tokens", url: "/staking", icons: [{ src: "/icon-192.png", sizes: "192x192" }] },
          { name: "Mining", short_name: "Mine", description: "Start a mining session", url: "/mining", icons: [{ src: "/icon-192.png", sizes: "192x192" }] },
          { name: "Referrals", short_name: "Refer", description: "View referral network", url: "/referrals", icons: [{ src: "/icon-192.png", sizes: "192x192" }] },
        ],
      },
      injectManifest: {
        globPatterns: ["**/*.{js,css,html,ico,png,svg,woff,woff2,webmanifest}"],
      },
    })
  );

  return {
    base: "/",
    plugins,
    resolve: {
      alias: {
        "@": path.resolve(import.meta.dirname, "client", "src"),
        "@shared": path.resolve(import.meta.dirname, "shared"),
        "@assets": path.resolve(import.meta.dirname, "attached_assets"),
      },
    },
    root: path.resolve(import.meta.dirname, "client"),
    optimizeDeps: {
      include: ["react", "react-dom"],
    },
    build: {
      outDir: path.resolve(import.meta.dirname, "dist/public"),
      emptyOutDir: true,
      sourcemap: true,
      rollupOptions: {
        output: {
          // robust: everything from node_modules in one vendor chunk
          manualChunks(id) {
            if (id.includes("node_modules")) return "vendor";
          },
        },
      },
      chunkSizeWarningLimit: 600,
    },
    server: {
      fs: { strict: true, deny: ["**/.*"] },
      // Replit watcher limits workaround
      watch: {
        usePolling: true,
        interval: 300,
        ignored: [
          "**/node_modules/**",
          "**/.git/**",
          "**/dist/**",
          "**/.pnpm/**",
          "**/pnpm-store/**",
          "/nix/store/**",
          "**/.cache/**",
        ],
      },
    },
  };
});
```

> Also remove `runtimeErrorOverlay()` from plugins entirely; dev-only Replit plugins replace it.

---

# 2) `server/index.ts` – fix CSP (prod)

Replace your Helmet block with:

```ts
const isDevelopment = app.get("env") === "development";

app.use(
  helmet({
    contentSecurityPolicy: isDevelopment
      ? false // allow HMR/dev tools
      : {
          directives: {
            defaultSrc: ["'self'"],
            scriptSrc: ["'self'"], // NO 'unsafe-eval' in prod
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            imgSrc: ["'self'", "data:", "https:", "blob:"],
            connectSrc: ["'self'", "wss:", "https:"],
            fontSrc: ["'self'", "https://fonts.gstatic.com", "data:"],
            objectSrc: ["'none'"],
            mediaSrc: ["'self'"],
            frameSrc: ["'none'"],
            workerSrc: ["'self'", "blob:"],
            reportUri: ["/csp-report"],
          },
          reportOnly: false,
        },
    crossOriginEmbedderPolicy: false,
  })
);
```

---

# 3) Static file serving – **no HTML fallback for assets**

Where you implement `serveStatic(app)`, ensure it behaves like this:

```ts
import path from "path";
import express, { type Express } from "express";

export function serveStatic(app: Express) {
  const distDir = path.resolve(process.cwd(), "dist/public");

  // HTML: don't cache
  app.use((req, res, next) => {
    if (req.method === "GET" && (req.path === "/" || req.path.endsWith(".html"))) {
      res.setHeader("Cache-Control", "no-store");
    }
    next();
  });

  app.use(
    express.static(distDir, {
      maxAge: "1y",
      immutable: true,
      setHeaders(res, file) {
        if (file.endsWith(".js")) res.setHeader("Content-Type", "application/javascript; charset=utf-8");
        if (file.endsWith(".css")) res.setHeader("Content-Type", "text/css; charset=utf-8");
        if (file.endsWith(".webmanifest")) res.setHeader("Content-Type", "application/manifest+json; charset=utf-8");
      },
    })
  );

  // SPA fallback ONLY for non-file paths
  app.get("*", (req, res) => {
    if (/\.[a-z0-9]+$/i.test(req.path)) return res.status(404).end(); // no HTML to JS requests
    res.sendFile(path.join(distDir, "index.html"));
  });
}
```

---

# 4) Replit watcher limit (ENOSPC)

Set these env vars in Replit (Secrets) **or** prefix your dev script:

```bash
CHOKIDAR_USEPOLLING=true
WATCHPACK_POLLING=true
```

Package.json dev script (optional):

```json
"dev": "CHOKIDAR_USEPOLLING=1 WATCHPACK_POLLING=1 NODE_ENV=development tsx server/index.ts"
```

---

# 5) Rebuild, purge, verify

1. **Clean & build**

```bash
rm -rf node_modules .vite dist
pnpm install
pnpm build
```

2. **Bump SW cache version** in `sw.ts` (e.g., `const CACHE_VERSION = 'v9'`) and rebuild if changed.
3. **Purge Cloudflare** (Everything or `/assets/*`). Disable Rocket Loader / JS minify that rewrites modules.
4. **Browser hard refresh (with SW):** DevTools → Application → *Unregister* SW → *Clear storage* → reload.

**Checks**

* Open `/assets/vendor-*.js` in the browser → must be JS (not HTML).
* `curl -I https://xnrt.org/assets/vendor-*.js` → `Content-Type: application/javascript`.
* DevTools Network → search “react” → should be inside the single `vendor` chunk.
* Console → no `useState undefined`.

---

If you want, paste your current `serveStatic` implementation and I’ll align it exactly, but the snippets above are safe drop-ins. Once these are in, the `useState` crash + CSP warnings should be gone and dev will run without watcher errors.
