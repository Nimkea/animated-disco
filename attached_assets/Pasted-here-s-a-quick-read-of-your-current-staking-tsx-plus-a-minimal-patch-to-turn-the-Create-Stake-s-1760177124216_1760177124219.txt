here’s a quick read of your current `staking.tsx`, plus a minimal patch to turn the “Create Stake” section into a **popup** that opens when a tier card is clicked.

## What the page does now (quick analysis)

* Clicking a tier sets `selectedTier`, which renders a **Create Stake** card **below** the tiers.
* Submit calls `createStakeMutation`, then clears amount + `selectedTier`.
* UX issue: user must scroll down to the form; you want a **modal dialog** instead.

## Minimal change plan

* Keep your state/logic exactly as-is.
* Add a `showCreateDialog` boolean.
* When a tier is clicked → set the tier **and** open the dialog.
* Move the existing Create Stake card markup into a shadcn `Dialog`.
* On successful create → also close the dialog.

---

## Combine Patch (drop-in)

```
*** Begin Patch
*** Update File: client/src/pages/staking.tsx
@@
-import { useState, useEffect, useMemo } from "react";
+import { useState, useEffect, useMemo } from "react";
 import { useQuery, useMutation } from "@tanstack/react-query";
 import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
 import { Button } from "@/components/ui/button";
 import { Input } from "@/components/ui/input";
 import { Label } from "@/components/ui/label";
@@
 import { STAKING_TIERS, type StakingTier, type Stake, type Balance } from "@shared/schema";
 import { isUnauthorizedError } from "@/lib/authUtils";
 import { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from "recharts";
+import { Dialog, DialogContent, DialogHeader as DialogHeaderBase, DialogTitle as DialogTitleBase, DialogDescription as DialogDescriptionBase } from "@/components/ui/dialog";
@@
   const { toast } = useToast();
   const [selectedTier, setSelectedTier] = useState<StakingTier | null>(null);
   const [amount, setAmount] = useState("");
+  const [showCreateDialog, setShowCreateDialog] = useState(false);
   const [historyFilter, setHistoryFilter] = useState<string>("all");
   const [historySortBy, setHistorySortBy] = useState<string>("date");
   const [showWithdrawConfirm, setShowWithdrawConfirm] = useState(false);
   const [selectedStakeToWithdraw, setSelectedStakeToWithdraw] = useState<Stake | null>(null);
@@
     onSuccess: () => {
       toast({
         title: "Stake Created!",
         description: "Your staking position has been created successfully.",
       });
       queryClient.invalidateQueries({ queryKey: ["/api/stakes"] });
       queryClient.invalidateQueries({ queryKey: ["/api/balance"] });
       setAmount("");
       setSelectedTier(null);
+      setShowCreateDialog(false);
     },
@@
         {(Object.entries(STAKING_TIERS) as [StakingTier, typeof STAKING_TIERS[StakingTier]][]).map(([key, tier]) => (
           <Card
             key={key}
             className={`cursor-pointer transition-all hover-elevate ${
               selectedTier === key ? "border-primary ring-2 ring-primary/20" : ""
             }`}
-            onClick={() => setSelectedTier(key)}
+            onClick={() => {
+              setSelectedTier(key);
+              setShowCreateDialog(true);
+            }}
             data-testid={`tier-${key}`}
           >
@@
-      {selectedTier && (
-        <Card className="border-primary/20 bg-gradient-to-br from-card to-primary/5">
-          <CardHeader>
-            <CardTitle>Create Stake - {STAKING_TIERS[selectedTier].name}</CardTitle>
-            <CardDescription>Enter the amount you want to stake</CardDescription>
-          </CardHeader>
-          <CardContent className="space-y-4">
-            <div>
-              <Label htmlFor="amount">Stake Amount (XNRT)</Label>
-              <Input
-                id="amount"
-                type="number"
-                placeholder={`Min: ${STAKING_TIERS[selectedTier].minAmount.toLocaleString()}`}
-                value={amount}
-                onChange={(e) => setAmount(e.target.value)}
-                data-testid="input-stake-amount"
-              />
-            </div>
-
-            {amount && parseFloat(amount) > 0 && (
-              <div className="space-y-3 p-4 bg-muted/50 rounded-md">
-                <div className="flex items-center justify-between">
-                  <span className="text-sm text-muted-foreground">Daily Profit:</span>
-                  <span className="font-bold text-chart-2">+{profit.daily.toLocaleString()} XNRT</span>
-                </div>
-                <div className="flex items-center justify-between">
-                  <span className="text-sm text-muted-foreground">Total Profit ({STAKING_TIERS[selectedTier].duration} days):</span>
-                  <span className="font-bold text-chart-2">+{profit.total.toLocaleString()} XNRT</span>
-                </div>
-                <div className="flex items-center justify-between">
-                  <span className="text-sm text-muted-foreground">Final Amount:</span>
-                  <span className="font-bold text-primary">
-                    {(parseFloat(amount) + profit.total).toLocaleString()} XNRT
-                  </span>
-                </div>
-              </div>
-            )}
-
-            <Button
-              className="w-full"
-              size="lg"
-              disabled={!amount || createStakeMutation.isPending}
-              onClick={handleStake}
-              data-testid="button-create-stake"
-            >
-              {createStakeMutation.isPending ? "Creating..." : "Create Stake"}
-            </Button>
-          </CardContent>
-        </Card>
-      )}
+      {/* Create Stake Modal */}
+      <Dialog open={!!selectedTier && showCreateDialog} onOpenChange={setShowCreateDialog}>
+        <DialogContent className="sm:max-w-lg">
+          {selectedTier && (
+            <>
+              <DialogHeaderBase>
+                <DialogTitleBase>
+                  Create Stake — {STAKING_TIERS[selectedTier].name}
+                </DialogTitleBase>
+                <DialogDescriptionBase>
+                  Enter the amount you want to stake
+                </DialogDescriptionBase>
+              </DialogHeaderBase>
+
+              <div className="space-y-4">
+                <div>
+                  <Label htmlFor="amount">Stake Amount (XNRT)</Label>
+                  <Input
+                    id="amount"
+                    type="number"
+                    placeholder={`Min: ${STAKING_TIERS[selectedTier].minAmount.toLocaleString()}`}
+                    value={amount}
+                    onChange={(e) => setAmount(e.target.value)}
+                    data-testid="input-stake-amount"
+                  />
+                </div>
+
+                {amount && parseFloat(amount) > 0 && (
+                  <div className="space-y-3 p-4 bg-muted/50 rounded-md">
+                    <div className="flex items-center justify-between">
+                      <span className="text-sm text-muted-foreground">Daily Profit:</span>
+                      <span className="font-bold text-chart-2">+{profit.daily.toLocaleString()} XNRT</span>
+                    </div>
+                    <div className="flex items-center justify-between">
+                      <span className="text-sm text-muted-foreground">
+                        Total Profit ({STAKING_TIERS[selectedTier].duration} days):
+                      </span>
+                      <span className="font-bold text-chart-2">+{profit.total.toLocaleString()} XNRT</span>
+                    </div>
+                    <div className="flex items-center justify-between">
+                      <span className="text-sm text-muted-foreground">Final Amount:</span>
+                      <span className="font-bold text-primary">
+                        {(parseFloat(amount) + profit.total).toLocaleString()} XNRT
+                      </span>
+                    </div>
+                  </div>
+                )}
+
+                <Button
+                  className="w-full"
+                  size="lg"
+                  disabled={!amount || createStakeMutation.isPending}
+                  onClick={handleStake}
+                  data-testid="button-create-stake"
+                >
+                  {createStakeMutation.isPending ? "Creating..." : "Create Stake"}
+                </Button>
+              </div>
+            </>
+          )}
+        </DialogContent>
+      </Dialog>
*** End Patch
```

### Result

* Tapping any tier opens a **Dialog** with the same create form (no scrolling needed).
* On success, we **close the dialog** and reset fields (same as before).
* Desktop & mobile both benefit; keyboard users can `Esc` to close.

If you prefer a separate reusable `<CreateStakeDialog />` component (cleaner), say the word and I’ll split it out for you.
