Yep—that flow is basically in place already. Here’s the exact state and the one change I recommend so it’s airtight:

# What you have now

* **Manual deposit form (`POST /api/transactions/deposit`)**
  Creates a **pending** `Transaction` (`verified: false`) → **admin must verify/approve** via
  `POST /api/admin/deposits/:id/verify` then `.../approve`. ✅

* **Withdrawals (`POST /api/transactions/withdrawal`)**
  Creates **pending** `Transaction` → **admin approves/rejects** via
  `POST /api/admin/withdrawals/:id/approve|reject`. ✅

* **Auto-credit (scanner)**
  Only for transfers **to the user’s derived deposit address** (or legacy treasury + linked wallet).
  This is controlled by `AUTO_DEPOSIT=true`. ✅

# The one place that bypasses admin (fix this)

`POST /api/wallet/report-deposit` will **auto-credit** if the TX sender is one of the user’s **linked wallets**.
If you want “manual deposit ⇒ *always* admin approval”, change that branch to create a **pending** transaction instead of an approved one.

### Minimal patch (in `routes.ts`, inside `/api/wallet/report-deposit`)

Replace the “linked wallet” branch:

```diff
- if (linkedWallet) {
-   // Auto-credit: TX is from user's linked wallet
-   await prisma.$transaction(async (tx) => {
-     await tx.transaction.create({
-       data: {
-         userId,
-         type: "deposit",
-         amount: new Prisma.Decimal(xnrtAmount),
-         usdtAmount: new Prisma.Decimal(usdtAmount),
-         transactionHash,
-         walletAddress: fromAddress,
-         status: "approved",
-         verified: true,
-         confirmations: verification.confirmations,
-         verificationData: {
-           autoVerified: true,
-           reportSubmitted: true,
-           verifiedAt: new Date().toISOString(),
-           blockNumber: receipt?.blockNumber,
-         } as any,
-       }
-     });
-     await tx.balance.upsert({ ...increment logic... });
-   });
-   // notify...
-   return res.json({ message: "Deposit verified and credited automatically!", credited: true, amount: xnrtAmount });
- } else {
+ if (linkedWallet) {
+   // Create a PENDING transaction; admin still approves
+   await prisma.transaction.create({
+     data: {
+       userId,
+       type: "deposit",
+       amount: new Prisma.Decimal(xnrtAmount),
+       usdtAmount: new Prisma.Decimal(usdtAmount),
+       transactionHash,
+       walletAddress: fromAddress, // who sent it
+       status: "pending",
+       verified: true, // on-chain verified, but NOT credited
+       confirmations: verification.confirmations,
+       verificationData: {
+         autoVerified: true,
+         viaReport: true,
+         blockNumber: receipt?.blockNumber,
+       } as any,
+     }
+   });
+   return res.json({
+     message: "Deposit verified on-chain. Waiting for admin approval.",
+     verified: true,
+     pendingAdminReview: true
+   });
+ } else {
   // (unchanged) create UnmatchedDeposit for admin manual match
```

> Optional: if you’d like to make this behavior switchable, gate the “auto-credit” path behind an env flag, e.g. `REPORT_AUTO_CREDIT_LINKED=true|false` (default **false**).

# TL;DR

* **Manual deposit form** → pending → **admin approves** (already correct).
* **“Report missing deposit”** → **make it pending** even for linked wallets (patch above).
* **Withdrawals** → pending → **admin approves** (already correct).

If you want, I can prep a full diff with that patch plus a small ENV toggle so you can flip behavior without code changes.
