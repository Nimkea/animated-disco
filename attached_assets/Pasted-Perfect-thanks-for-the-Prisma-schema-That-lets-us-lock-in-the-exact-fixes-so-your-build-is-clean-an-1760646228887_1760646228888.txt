Perfect—thanks for the Prisma schema. That lets us lock in the exact fixes so your build is clean and the wallet-link/admin flows are solid.

# Wallet link status (quick)

* Your **DB-backed nonce** flow matches the schema (`WalletNonce`, `LinkedWallet`) and is correct.
* The issue you saw earlier was just **not being logged in inside the MetaMask webview**; once you logged in there, linking worked—as expected.
* Keep your manual fallback (paste address → sign → paste signature) for users without an injected provider; your server already supports it.

# Exact fixes in `server/routes.ts` based on your schema

## 1) Unmatched deposits list: bad sort field

**Schema:** `UnmatchedDeposit` has `createdAt`, not `detectedAt`.

```diff
- orderBy: { detectedAt: 'desc' },
+ orderBy: { createdAt: 'desc' },
```

## 2) Deposit reports list: bad sort field

**Schema:** `DepositReport` has `createdAt`, not `reportedAt`.

```diff
- orderBy: { reportedAt: 'desc' },
+ orderBy: { createdAt: 'desc' },
```

## 3) Resolve deposit report: wrong tx field + optional amount + no `resolvedBy` in schema

**Schema:** `DepositReport` field is `txHash` (nullable), not `transactionHash`.
There is **no** `resolvedBy` in the model. `amount` is nullable.

Change the “approved” branch:

```diff
// Compute amounts safely (amount is nullable Decimal)
- const usdtAmount = parseFloat(report.amount.toString());
+ const usdtAmount = parseFloat((report.amount ?? 0 as any).toString()); // or guard & 400 if null

// Create approved transaction
await tx.transaction.create({
  data: {
    userId: report.userId,
    type: "deposit",
    amount: new Prisma.Decimal(xnrtAmount),
    usdtAmount: new Prisma.Decimal(usdtAmount),
-   transactionHash: report.transactionHash,
+   transactionHash: report.txHash ?? null,
    status: "approved",
    adminNotes: adminNotes || "Credited from deposit report",
-   approvedBy: req.authUser!.id,
+   approvedBy: req.authUser!.id,
    approvedAt: new Date(),
  }
});

// Update report
await tx.depositReport.update({
  where: { id },
  data: {
    status: 'approved',
-   resolvedBy: req.authUser!.id,
    resolvedAt: new Date(),
    adminNotes: adminNotes || null,
  }
});
```

And the “rejected” branch:

```diff
await prisma.depositReport.update({
  where: { id },
  data: {
    status: 'rejected',
-   resolvedBy: req.authUser!.id,
    resolvedAt: new Date(),
    adminNotes: adminNotes || null,
  }
});
```

> If you want to keep `resolvedBy`, add it to the model and run a migration:
>
> ```prisma
> resolvedBy String?
> ```

## 4) Other admin code that referenced `transactionHash` on `DepositReport`

Do a quick sweep—any place using `report.transactionHash` should be `report.txHash`.

## 5) TypeScript “declared but never used”

Rename unused parameters to `_req` / `_res` or remove locals, e.g.:

```diff
-app.post('/csp-report', (req, res) => {
+app.post('/csp-report', (_req, res) => {
```

If you have locals like `todayStart` that aren’t used, either remove them or rename to `_todayStart`.

## 6) Logout cookie clearing (nice-to-have parity)

Match the attributes you set on login so the cookie actually clears in webviews:

```ts
const isProd = process.env.NODE_ENV === 'production';
res.clearCookie('sid', {
  httpOnly: true,
  secure: isProd,
  sameSite: isProd ? 'none' : 'lax',
});
```

# Why the earlier “Failed to generate challenge” happened

* Not logged in inside MetaMask’s in-app browser → `requireAuth` failed previously (or session cookie wasn’t present in that webview).
* Once you logged in **in that webview**, `/api/wallet/link/challenge` succeeded and the flow completed.

Your current cookie issuance in `/auth/login` and `/auth/csrf`:

```ts
const isProd = process.env.NODE_ENV === 'production';
res.cookie('sid', token, {
  httpOnly: true,
  secure: isProd,
  sameSite: isProd ? 'none' : 'lax',
  ...
});
```

This is correct for webviews (MetaMask/Trust).

# Optional UX improvement (still recommended)

Add a “Use manual link” path in the UI:

1. Input: wallet address → request challenge → show message.
2. Button: “Sign in your wallet app” (opens MetaMask / WalletConnect).
3. Input: signature paste → POST `/api/wallet/link/confirm`.

Server already supports it; your `LinkWalletCard` just needs the dialog.

---

If you want, paste the exact `deposit-report` handlers and I’ll return a clean, drop-in patched version with all the diffs applied.
