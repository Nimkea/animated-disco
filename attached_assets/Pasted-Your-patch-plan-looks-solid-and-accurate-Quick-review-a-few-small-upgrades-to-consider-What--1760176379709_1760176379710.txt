Your patch plan looks solid and accurate. Quick review + a few small upgrades to consider:

👍 What’s correct

Right API: Using useSidebar() and calling setOpenMobile(false) is the proper way to close the Sheet-based sidebar on mobile.

Scoped effect: Guarding with isMobile keeps desktop behavior unchanged.

Coverage: Adding onClick={handleNavClick} to each <Link> ensures taps close the drawer and reveal content immediately.

🧪 Test checklist (acceptance)

Narrow viewport ≤1024px → open sidebar → tap any nav item → sidebar closes and route changes.

Desktop >1024px → tap nav item → sidebar stays open.

Tap the current active menu item → sidebar still closes on mobile.

Use keyboard (Tab + Enter) on a nav item on mobile → closes.

Admin item behaves the same.

Resize from desktop→mobile with sidebar open → tap nav item → closes.

⚠️ Small risks / gotchas

Future menu items: If someone adds a new <Link> and forgets the handler, it won’t auto-close.
Mitigation: Event delegation on the container.

🛠️ Optional improvement (event delegation)

This avoids adding onClick to each link and automatically covers future items:

// In AppSidebar()
const { isMobile, setOpenMobile } = useSidebar();

const handleAnyNavClick: React.MouseEventHandler = (e) => {
  if (!isMobile) return;
  const a = (e.target as HTMLElement).closest<HTMLAnchorElement>("a[href]");
  if (a) setOpenMobile(false);
};

// ...
<SidebarContent onClickCapture={handleAnyNavClick}>
  {/* ...everything else unchanged... */}
</SidebarContent>


You can keep both (per-link + delegation) or switch to delegation only.

🔁 Programmatic navigation case

If any part of the app navigates without clicking a link (e.g., navigate('/staking')), the drawer will stay open. If that matters, add a tiny listener:

import { useLocation } from "wouter";
import { useEffect } from "react";
const [pathname] = useLocation();
useEffect(() => {
  if (isMobile) setOpenMobile(false);
}, [pathname, isMobile, setOpenMobile]);

✅ Definition of done

Mobile/tablet: nav click → drawer closes within the same event loop tick.

Desktop: no behavioral change.

No console errors, no layout jumps, and Lighthouse/Mobile UX improves (fewer taps).