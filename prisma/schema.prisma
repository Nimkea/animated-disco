generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String    @unique
  passwordHash    String
  referralCode    String    @unique
  referredBy      String?
  emailVerified   Boolean   @default(false)
  emailVerificationToken String?
  emailVerificationExpires DateTime?
  isAdmin         Boolean   @default(false)
  xp              Int       @default(0)
  level           Int       @default(1)
  streak          Int       @default(0)
  lastCheckIn     DateTime?
  
  // HD Wallet deposit address (unique per user)
  depositAddress  String?   @unique @db.VarChar(42)
  derivationIndex Int?      @unique
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  balance         Balance?
  stakes          Stake[]
  miningSessions  MiningSession[]
  referralsGiven  Referral[]  @relation("Referrer")
  referralsReceived Referral[] @relation("Referred")
  transactions    Transaction[]
  userTasks       UserTask[]
  userAchievements UserAchievement[]
  activities      Activity[]
  sessions        Session[]
  passwordResets  PasswordReset[]
  notifications   Notification[]
  pushSubscriptions PushSubscription[]
  linkedWallets   LinkedWallet[]
  depositReports  DepositReport[]
  depositAddresses DepositAddress[]
}

model Session {
  id        String   @id @default(uuid())
  jwtId     String   @unique
  userId    String
  createdAt DateTime @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jwtId])
}

model Balance {
  id              String   @id @default(uuid())
  userId          String   @unique
  xnrtBalance     Decimal  @default(0) @db.Decimal(38, 18)
  stakingBalance  Decimal  @default(0) @db.Decimal(38, 18)
  miningBalance   Decimal  @default(0) @db.Decimal(38, 18)
  referralBalance Decimal  @default(0) @db.Decimal(38, 18)
  totalEarned     Decimal  @default(0) @db.Decimal(38, 18)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DepositAddress {
  id              String   @id @default(uuid())
  userId          String
  address         String   @unique @db.VarChar(42)
  coinType        Int
  derivationIndex Int
  derivationPath  String
  version         Int      @default(2)
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([coinType, derivationIndex])
  @@index([userId, active])
}

model Stake {
  id             String    @id @default(uuid())
  userId         String
  tier           String
  amount         Decimal   @db.Decimal(38, 18)
  dailyRate      Decimal   @db.Decimal(8, 6)
  duration       Int
  startDate      DateTime  @default(now())
  endDate        DateTime
  totalProfit    Decimal   @default(0) @db.Decimal(38, 18)
  lastProfitDate DateTime?
  status         String    @default("active")
  createdAt      DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([userId, createdAt])
}

model MiningSession {
  id              String    @id @default(uuid())
  userId          String
  baseReward      Int       @default(10)
  adBoostCount    Int       @default(0)
  boostPercentage Int       @default(0)
  finalReward     Int       @default(10)
  startTime       DateTime  @default(now())
  endTime         DateTime?
  nextAvailable   DateTime
  status          String    @default("active")
  createdAt       DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model Referral {
  id               String   @id @default(uuid())
  referrerId       String
  referredUserId   String
  level            Int
  totalCommission  Decimal  @default(0) @db.Decimal(38, 18)
  createdAt        DateTime @default(now())

  referrer     User @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referredUser User @relation("Referred", fields: [referredUserId], references: [id], onDelete: Cascade)

  @@index([referrerId])
  @@index([referredUserId])
}

model Transaction {
  id              String    @id @default(uuid())
  userId          String
  type            String
  amount          Decimal   @db.Decimal(38, 18)
  usdtAmount      Decimal?  @db.Decimal(38, 18)
  source          String?
  walletAddress   String?
  transactionHash String?   @db.Text
  proofImageUrl   String?
  status          String    @default("pending")
  adminNotes      String?
  fee             Decimal?  @db.Decimal(38, 18)
  netAmount       Decimal?  @db.Decimal(38, 18)
  approvedBy      String?
  approvedAt      DateTime?
  verified        Boolean   @default(false)
  confirmations   Int       @default(0)
  verificationData Json?
  createdAt       DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([transactionHash, walletAddress])
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([userId, createdAt])
}

model Task {
  id          String    @id @default(uuid())
  title       String    @unique
  description String
  xpReward    Int
  xnrtReward  Decimal   @default(0) @db.Decimal(38, 18)
  category    String
  requirements String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  userTasks UserTask[]
}

model UserTask {
  id          String    @id @default(uuid())
  userId      String
  taskId      String
  progress    Int       @default(0)
  maxProgress Int       @default(1)
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
  @@index([userId])
  @@index([taskId])
}

model Achievement {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  icon        String
  category    String
  requirement Int
  xpReward    Int
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([achievementId])
}

model Activity {
  id          String   @id @default(uuid())
  userId      String
  type        String
  description String
  metadata    String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, createdAt])
}

model PasswordReset {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Notification {
  id               String    @id @default(uuid())
  userId           String
  type             String
  title            String
  message          String
  metadata         String?
  read             Boolean   @default(false)
  deliveryAttempts Int?
  deliveredAt      DateTime?
  lastAttemptAt    DateTime?
  pendingPush      Boolean   @default(false)
  pushError        String?
  createdAt        DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
  @@index([pendingPush])
}

model PushSubscription {
  id             String    @id @default(uuid())
  userId         String
  endpoint       String
  p256dh         String
  auth           String
  expirationTime DateTime?
  enabled        Boolean   @default(true)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
  @@index([endpoint])
}

model LinkedWallet {
  id        String   @id @default(uuid())
  userId    String
  address   String   @db.VarChar(42)
  signature String
  nonce     String
  linkedAt  DateTime @default(now())
  active    Boolean  @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, address])
  @@index([userId])
  @@index([address])
}

model WalletNonce {
  id        String   @id @default(uuid())
  userId    String
  address   String   @db.VarChar(42)
  nonce     String
  issuedAt  DateTime @default(now())
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([userId, address])
  @@index([expiresAt])
}

model UnmatchedDeposit {
  id              String    @id @default(uuid())
  fromAddress     String    @db.VarChar(42)
  toAddress       String    @db.VarChar(42)
  amount          Decimal   @db.Decimal(38, 18)
  transactionHash String    @unique @db.Text
  blockNumber     Int
  confirmations   Int       @default(0)
  matched         Boolean   @default(false)
  matchedUserId   String?
  matchedAt       DateTime?
  reportedByUserId String?
  createdAt       DateTime  @default(now())

  @@index([fromAddress])
  @@index([matched])
  @@index([blockNumber])
  @@index([reportedByUserId])
}

model DepositReport {
  id          String    @id @default(uuid())
  userId      String
  fromAddress String    @db.VarChar(42)
  amount      Decimal?  @db.Decimal(38, 18)
  txHash      String?   @db.Text
  notes       String?
  status      String    @default("open")
  resolvedAt  DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([fromAddress])
  @@index([status])
}

model ScannerState {
  id            String   @id @default(uuid())
  lastBlock     Int      @default(0)
  lastScanAt    DateTime @default(now())
  isScanning    Boolean  @default(false)
  errorCount    Int      @default(0)
  lastError     String?
  updatedAt     DateTime @updatedAt
}
