generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id              String    @id @default(uuid())
  email           String    @unique
  username        String    @unique
  passwordHash    String
  referralCode    String    @unique
  referredBy      String?
  isAdmin         Boolean   @default(false)
  xp              Int       @default(0)
  level           Int       @default(1)
  streak          Int       @default(0)
  lastCheckIn     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  balance         Balance?
  stakes          Stake[]
  miningSessions  MiningSession[]
  referralsGiven  Referral[]  @relation("Referrer")
  referralsReceived Referral[] @relation("Referred")
  transactions    Transaction[]
  userTasks       UserTask[]
  userAchievements UserAchievement[]
  activities      Activity[]
  sessions        Session[]
  passwordResets  PasswordReset[]
}

model Session {
  id        String   @id @default(uuid())
  jwtId     String   @unique
  userId    String
  createdAt DateTime @default(now())
  revokedAt DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([jwtId])
}

model Balance {
  id              String   @id @default(uuid())
  userId          String   @unique
  xnrtBalance     Decimal  @default(0)
  stakingBalance  Decimal  @default(0)
  miningBalance   Decimal  @default(0)
  referralBalance Decimal  @default(0)
  totalEarned     Decimal  @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Stake {
  id             String    @id @default(uuid())
  userId         String
  tier           String
  amount         Decimal
  dailyRate      Decimal
  duration       Int
  startDate      DateTime  @default(now())
  endDate        DateTime
  totalProfit    Decimal   @default(0)
  lastProfitDate DateTime?
  status         String    @default("active")
  createdAt      DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model MiningSession {
  id              String    @id @default(uuid())
  userId          String
  baseReward      Int       @default(10)
  adBoostCount    Int       @default(0)
  boostPercentage Int       @default(0)
  finalReward     Int       @default(10)
  startTime       DateTime  @default(now())
  endTime         DateTime?
  nextAvailable   DateTime
  status          String    @default("active")
  createdAt       DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model Referral {
  id               String   @id @default(uuid())
  referrerId       String
  referredUserId   String
  level            Int
  totalCommission  Decimal  @default(0)
  createdAt        DateTime @default(now())

  referrer     User @relation("Referrer", fields: [referrerId], references: [id], onDelete: Cascade)
  referredUser User @relation("Referred", fields: [referredUserId], references: [id], onDelete: Cascade)

  @@index([referrerId])
  @@index([referredUserId])
}

model Transaction {
  id              String    @id @default(uuid())
  userId          String
  type            String
  amount          Decimal
  usdtAmount      Decimal?
  source          String?
  walletAddress   String?
  transactionHash String?
  proofImageUrl   String?
  status          String    @default("pending")
  adminNotes      String?
  fee             Decimal?
  netAmount       Decimal?
  approvedBy      String?
  approvedAt      DateTime?
  createdAt       DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([status])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String
  xpReward    Int
  xnrtReward  Decimal   @default(0)
  category    String
  requirements String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  userTasks UserTask[]
}

model UserTask {
  id          String    @id @default(uuid())
  userId      String
  taskId      String
  progress    Int       @default(0)
  maxProgress Int       @default(1)
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([taskId])
}

model Achievement {
  id          String   @id @default(uuid())
  title       String
  description String
  icon        String
  category    String
  requirement Int
  xpReward    Int
  createdAt   DateTime @default(now())

  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String   @id @default(uuid())
  userId        String
  achievementId String
  unlockedAt    DateTime @default(now())

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([achievementId])
}

model Activity {
  id          String   @id @default(uuid())
  userId      String
  type        String
  description String
  metadata    String?
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PasswordReset {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}
